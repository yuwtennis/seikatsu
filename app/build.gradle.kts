/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.8/userguide/building_java_projects.html in the Gradle documentation.
 */
import org.sonarqube.gradle.SonarTask

version = "v0.0.1"

plugins {
    id("org.owasp.dependencycheck") version "12.1.1"
    id("org.sonarqube") version "6.2.0.5505"
    id("com.diffplug.spotless") version "7.0.3"

    checkstyle

    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation(libs.junit.jupiter)
    testCompileOnly("junit:junit:4.13.2")
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
    testRuntimeOnly("com.fasterxml.jackson.core:jackson-databind:2.18.3")

    // This dependency is used by the application.
    implementation(libs.guava)
    implementation(platform("org.apache.beam:beam-sdks-java-google-cloud-platform-bom:2.64.0"))
    implementation("org.apache.beam:beam-sdks-java-core")
    implementation("org.apache.beam:beam-runners-direct-java")
    implementation("org.apache.beam:beam-sdks-java-io-rrio")
    implementation("org.apache.beam:beam-sdks-java-extensions-avro")
    implementation("org.apache.beam:beam-sdks-java-io-google-cloud-platform")
    implementation("com.google.api-client:google-api-client:2.7.2")
    compileOnly("com.google.auto.value:auto-value-annotations:1.11.0")
    annotationProcessor("com.google.auto.value:auto-value:1.11.0")
    implementation("org.hamcrest:hamcrest:3.0")
    implementation("org.slf4j:slf4j-api:2.0.17")
    implementation("org.slf4j:slf4j-simple:2.0.17")
    implementation("org.apache.commons:commons-csv:1.14.0")
    implementation("commons-codec:commons-codec:1.18.0")
    implementation("de.grundid.opendatalab:geojson-jackson:1.14")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = "org.example.App"
}

checkstyle {
    toolVersion ="10.21.4"
    configFile = file("$rootDir/config/checkstyle/sun_checks.xml")
}

configure<org.owasp.dependencycheck.gradle.extension.DependencyCheckExtension> {
    nvd.apiKey = System.getenv("NVD_API_KEY")
    autoUpdate = false

    // Fail build if vulnerabilities are found
    failBuildOnCVSS = 0.0F
}

sonar {
    properties {
        property("sonar.host.url", System.getenv("SONAR_HOST_URL"))
        property("sonar.projectKey", System.getenv("SONAR_PROJECT_KEY"))
        property("sonar.organization",  System.getenv("SONAR_ORGANIZATION_NAME"))
        property("sonar.sources", "src/main/java")
        property("sonar.tests", "src/test/java")
    }
}

spotless {
    java {
        importOrder()
        removeUnusedImports()
        formatAnnotations()
        tarTree("**/*.java")
    }
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks.named<SonarTask>("sonar") {
    dependsOn("test")
}